# 文档代码化开发教程概览

### 什么是文档代码化开发？

> Writing, testing, publishing, and maintaining documentation using the same tools developers use for software code. 

文档代码化开发，就是将软件开发的方法和工具应用到文档的写作、测试、发布和维护上。  

软件开发发展至今，已有不少功能强大的开发者工具。软件开发的方式，也从瀑布式开发进展到敏捷开发，从长周期的“开发-测试-交付-使用”，到“尽早开发尽早审查-灵活变更需求-不断迭代循环”直至产品更加完美的开发模式，也给技术文档带来了启发。

- 敏捷开发

    应用敏捷开发的模式，在需求不够明确的情况下，代码开发的阶段性成果也能够尽早投入审查和使用，并在需求变更后及时进行迭代更新，在不断的沟通协作中，不合理需求和开发人员的错误理解都会慢慢更新。同理，体系较为复杂的文档开发实践中，也可以应用同样的模式。

- 版本控制

    用版本控制工具管理文档资源，就不需要浪费过多人力进行版本保存工作，只需要专注于修改自己文档直到满意，若有需要，完全可以回复到之前的某一版本。告别“最终版-打死也不改版-最终打死不该版”。

- 代码审查

    用代码审查的方式审查文档，检查文档可能存在的”bug”，比如语法错误、令文档美观度下降的输入错误、或错误的超链接等，获得更多更快的审查，意味着质量上的保障。

- 发布迭代

    在发布迭代方面，因为需要更多的手动实现，传统文档写作会需要更多人力。通过应用代码化管理模式，将文档托管到相关平台如 ReadTheDocs 和 Github Pages 自动发布，在文档内容更新之后可立即执行编译发布流程，即时便捷实现迭代。 




### 教程概览

本教程按照“搭建框架-内容创作-文档构建-托管发布“的思路进行组织。   
- 搭建框架  
  
    在进行文档写作之前，我们需要先搭起文档的框架，再向其中填充内容。这里主要介绍如何使用 Sphinx 进行文档生成，Sphinx 就是本教材所用的“框架工具”，在“ Sphinx 入门”章节将详细介绍如何安装配置 Sphinx 、新建项目和内容组织。

- 内容创作

    在这里我们不再使用 Microsoft Word 而使用标记语言和代码开发工具进行写作。在“标记语言初识”章节将介绍 Markdown 和 reStructured Text 两种标记语言的语法，和推荐使用的编辑器 VSCode。

- 文档构建
    
    完成了框架搭建和内容创作之后，文档还只是我们电脑中的几个文件夹，并没有可供发布的版本，所以需要将这些文件处理成可发布和浏览、成体系的文档。在“ Make 选项详解”章节将介绍不同的发布选项如何操作。  
    文档构建的过程中，还可以做一些自定义设置，比如发布成为 html 版本的网页主题调整、自定义调整 CSS（层叠样式表，定义 html 字体、颜色、位置等样式）、调整 pdf 字体字号等。在“主题自定义”章节将介绍如何进行这些调整。

- 文档托管

    文档完成了构建之后，还需要使文档可以通过一定的途径被他人访问，除了购买服务器后上传存储，还有其他不需要自己购买服务器的免费托管途径。在“在线托管”章节将介绍如何将文档通过 Github Pages 和 ReadtheDocs 托管发布。

- 协同与迭代

    文档代码化开发的特点之一就是能够多人协同与快速迭代。在“协同与版本控制”章节将以 Github 为例讲解如何进行线上协作与版本管理。本教程的最后，在“实践案例”章节将通过一个应用案例，将前面所讲内容贯穿起来，做一个从搭建框架到文档迭代的全面演示。


### 目标用户

本教程适用于有一定文档写作经验，希望掌握学习更多文档开发技能的**文档工程师**，也适用于无文档写作经验，希望入门文档写作与开发的**文档初学者**。  

用户需要有一定的计算机使用基础（不要求计算机编程基础），序言章节将汇总可能用到的一些计算机基础操作，其他相关操作在对应章节会详细讲解。
